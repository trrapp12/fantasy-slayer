/**
 * @jest-environment jsdom
 */

// Generated by CodiumAI

const { endGameWithDelay } = require('../js/index.js')

describe('endGameWithDelay', () => {

  // Calls the function "endGame" after a delay of 2500ms
  it('should call the function "endGame" after a delay of 2500ms', () => {
    jest.useFakeTimers();
    const endGameSpy = jest.spyOn(global, 'endGame');

    endGameWithDelay();

    expect(setTimeout).toHaveBeenCalledTimes(1);
    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 2500);
    jest.runAllTimers();
    expect(endGameSpy).toHaveBeenCalledTimes(1);

    jest.useRealTimers();
  });

  // If "endGame" throws an error, it is not caught and propagated
  it('should not catch and propagate an error thrown by "endGame"', () => {
    jest.useFakeTimers();
    const endGameSpy = jest.spyOn(global, 'endGame').mockImplementation(() => {
      throw new Error('Test error');
    });

    expect(() => {
      endGameWithDelay();
      jest.runAllTimers();
    }).toThrow('Test error');

    expect(endGameSpy).toHaveBeenCalledTimes(1);

    jest.useRealTimers();
  });

  // If "endGame" takes longer than 2500ms to execute, subsequent code execution is not blocked
  it('should not block subsequent code execution if "endGame" takes longer than 2500ms to execute', () => {
    jest.useFakeTimers();
    const endGameSpy = jest.spyOn(global, 'endGame').mockImplementation(() => {
      jest.advanceTimersByTime(3000);
    });

    endGameWithDelay();

    expect(setTimeout).toHaveBeenCalledTimes(1);
    expect(setTimeout).toHaveBeenLastCalledWith(expect.any(Function), 2500);
    jest.runAllTimers();
    expect(endGameSpy).toHaveBeenCalledTimes(1);

    jest.useRealTimers();
  });

  // If "endGame" is not a function, an error is thrown
  it('should throw an error if "endGame" is not a function', () => {
    jest.useFakeTimers();
    global.endGame = 'not a function';

    expect(() => {
      endGameWithDelay();
      jest.runAllTimers();
    }).toThrow('endGame is not a function');

    jest.useRealTimers();
  });

  // If the delay parameter is not a number, an error is thrown
  it('should throw an error if the delay parameter is not a number', () => {
    jest.useFakeTimers();

    expect(() => {
      endGameWithDelay('not a number');
      jest.runAllTimers();
    }).toThrow('delay must be a number');

    jest.useRealTimers();
  });
});
