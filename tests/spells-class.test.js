/**
 * @jest-environment jsdom
 */

// Generated by CodiumAI

const { Spells } = require('../js/spells-class.js')


describe('Spells', () => {

    // Spells class can be instantiated with a character and opponent
    it('should instantiate Spells class with character and opponent', () => {
      const character = { name: 'Character' };
      const opponent = { name: 'Opponent' };
      const spells = new Spells(character, opponent);
  
      expect(spells.character).toBe(character);
      expect(spells.opponent).toBe(opponent);
    });

    // shuffleArr method shuffles an array
    it('should shuffle the array', () => {
      const arr = [1, 2, 3, 4, 5];
      const spells = new Spells();
      const shuffledArr = spells.shuffleArr(arr);
  
      expect(shuffledArr).not.toBe(arr);
      expect(shuffledArr.sort()).toEqual(arr.sort());
    });

    // pickThreeCards method returns an array of three cards
    it('should return an array of three cards', () => {
      const arr = [1, 2, 3, 4, 5];
      const spells = new Spells();
      const pickedCards = spells.pickThreeCards(arr);
  
      expect(pickedCards.length).toBe(3);
      expect(arr.length).toBe(2);
    });

    // handleCardChoice method correctly handles spells that magnify skills
    it('should correctly handle spells that magnify skills', () => {
      const hero = { skill: ['skill1', 'skill2'] };
      const arr = [
        { spell_skills_it_magnifies: ['skill1'], spell_magnification: 2, spell_damage: 10 },
        { spell_skills_it_magnifies: ['skill3'], spell_magnification: 0, spell_damage: 5 }
      ];
      const villain = { health: 100 };
      const spells = new Spells(hero, villain);
      const handler = spells.handleCardChoice(hero, arr, villain);
  
      const evt = { target: { id: 0 } };
      handler(evt);
  
      expect(villain.health).toBe(80);
    });

    // handleCardChoice method correctly handles spells that do not magnify skills
    it('should correctly handle spells that do not magnify skills', () => {
      const hero = { skill: ['skill1', 'skill2'] };
      const arr = [
        { spell_skills_it_magnifies: ['skill3'], spell_magnification: 0, spell_damage: 5 },
        { spell_skills_it_magnifies: ['skill4'], spell_magnification: 0, spell_damage: 8 }
      ];
      const villain = { health: 100 };
      const spells = new Spells(hero, villain);
      const handler = spells.handleCardChoice(hero, arr, villain);
  
      const evt = { target: { id: 1 } };
      handler(evt);
  
      expect(villain.health).toBe(92);
    });

    // handleCardChoice method correctly handles spells that heal and drain
    it('should correctly handle spells that heal and drain', () => {
      const hero = { skill: ['skill1', 'skill2'], health: 80 };
      const arr = [
        { spell_skills_it_magnifies: ['skill1'], spell_magnification: 2, spell_damage: 10, spell_heal_effect: 5, spell_drain_effect: 3 },
        { spell_skills_it_magnifies: ['skill3'], spell_magnification: 0, spell_damage: 5, spell_heal_effect: 0, spell_drain_effect: 0 }
      ];
      const villain = { health: 100 };
      const spells = new Spells(hero, villain);
      const handler = spells.handleCardChoice(hero, arr, villain);
  
      const evt = { target: { id: 0 } };
      handler(evt);
  
      expect(hero.health).toBe(72);
      expect(villain.health).toBe(80);
    });
});
