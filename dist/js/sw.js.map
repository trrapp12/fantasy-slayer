{"mappings":"A,C,KCAA,IAAM,EAAa,oBACb,EAAW,WAEX,EAAS,CACb,IACA,cACA,oBACA,iBACA,iBACA,eACA,eACA,wBACA,uBACA,6BACA,gCACA,8BACA,2BACA,kCACA,gCACA,+BACA,6CACA,2EACA,4FACA,2CACA,6DAGD,CAED,SAAS,IACL,MAAO,AAAsB,cAAtB,SAAS,QAAQ,EAAoB,AAAsB,cAAtB,SAAS,QAAQ,AAC/D,CAGF,KAAK,gBAAgB,CAAC,UAAW,AAAA,IACxB,IAkBH,KAAK,WAAW,GAhBhB,EAAM,SAAS,CACb,AAAC,CAAA,UACC,IAAM,EAAQ,MAAM,OAAO,IAAI,CAAC,EAEhC,OAAM,EAAM,MAAM,CAAC,EAAO,MAAM,CAAC,AAAA,GAAS,CAAC,EAAM,QAAQ,CAAC,SAE1D,IAAM,EAAU,MAAM,OAAO,IAAI,CAAC,EAElC,OAAM,EAAQ,MAAM,CAAC,EAAO,MAAM,CAAC,AAAA,GAAS,EAAM,QAAQ,CAAC,SAG3D,KAAK,WAAW,EAClB,CAAA,IAMN,GAGF,KAAK,gBAAgB,CAAC,WAAY,AAAA,IAC9B,IAAM,EAAgB,CAAC,EAAY,EAAS,CAC5C,EAAM,SAAS,CACb,OAAO,IAAI,GAAG,IAAI,CAAC,AAAA,GACV,QAAQ,GAAG,CAChB,EAAW,GAAG,CAAC,AAAA,IACb,GAAI,CAAC,EAAc,QAAQ,CAAC,GAC1B,OAAO,OAAO,MAAM,CAAC,EAEzB,KAED,IAAI,CAAC,IAAM,KAAK,OAAO,CAAC,KAAK,IAEpC,GAGF,KAAK,gBAAgB,CAAC,QAAS,AAAA,IAEvB,IA6BA,EAAM,WAAW,CAAC,MAAM,EAAM,OAAO,GA3BlC,EAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,OAC1B,EAAM,WAAW,CACb,OAAO,IAAI,CAAC,YAAY,IAAI,CAAC,AAAA,GACpB,EAAM,KAAK,CAAC,EAAM,OAAO,EAAE,IAAI,CAAC,AAAA,GACrC,AAAI,GAKK,MAAM,EAAM,OAAO,EAAE,IAAI,CAAC,AAAA,IAC/B,EAAM,GAAG,CAAC,EAAM,OAAO,CAAE,EAAgB,KAAK,IACvC,OAQnB,EAAM,WAAW,CACb,OAAO,KAAK,CAAC,EAAM,OAAO,EAAE,IAAI,CAAC,AAAA,GAC1B,GAAkB,MAAM,EAAM,OAAO,GAQ1D,E,C","sources":["<anon>","js/sw.js"],"sourcesContent":["(() => {\nvar $b30a198135d8e84a$exports = {};\nconst $b30a198135d8e84a$var$CACHE_NAME = \"fantasy-slayer-v1\";\nconst $b30a198135d8e84a$var$JS_CACHE = \"js-cache\";\nconst $b30a198135d8e84a$var$currentCaches = [\n    $b30a198135d8e84a$var$CACHE_NAME,\n    $b30a198135d8e84a$var$JS_CACHE\n];\nconst $b30a198135d8e84a$var$ASSETS = [\n    \"/\",\n    \"/index.html\",\n    \"/css/critical.css\",\n    \"/css/index.css\",\n    \"/css/spell.css\",\n    \"/js/index.js\",\n    \"/js/utils.js\",\n    \"/js/character-data.js\",\n    \"/js/intro-handler.js\",\n    \"/js/render-health-chart.js\",\n    \"/assets/assets/soulforge.webp\",\n    \"/assets/assets/naqualk.webp\",\n    \"/assets/assets/mage.webp\",\n    \"/assets/assets/ignisfatuus.webp\",\n    \"/assets/assets/conscript.webp\",\n    \"/assets/assets/zed-fire.webp\",\n    \"/assets/AdobeStock_199937353-ec86d56f.webm\",\n    \"/assets/assets/audio/fantasmi-dell-opera-a-loop_AdobeStock_526744294.wav\",\n    \"/assets/assets/audio/EPIC-TRAILER-ACTION-ADVENTURE-(TENSE-NERVE)_AdobeStock_637559773.wav\",\n    \"/assets/assets/AdobeStock_460700032.webp\",\n    \"/assets/assets/audio/Under-Attack_AdobeStock_353737497.wav\"\n];\nfunction $b30a198135d8e84a$var$isDevelopmentEnvironment() {\n    return location.hostname === \"localhost\" || location.hostname === \"127.0.0.1\";\n}\n// Pre-cache game assets\nself.addEventListener(\"install\", (event)=>{\n    if (!$b30a198135d8e84a$var$isDevelopmentEnvironment()) // Production environment: Cache the assets.\n    event.waitUntil((async ()=>{\n        const cache = await caches.open($b30a198135d8e84a$var$CACHE_NAME);\n        // Cache all the assets except the JS files\n        await cache.addAll($b30a198135d8e84a$var$ASSETS.filter((asset)=>!asset.endsWith(\".js\")));\n        const jsCache = await caches.open($b30a198135d8e84a$var$JS_CACHE);\n        // Cache only the JS files\n        await jsCache.addAll($b30a198135d8e84a$var$ASSETS.filter((asset)=>asset.endsWith(\".js\")));\n        // Instruct the service worker to take control of the page immediately after installation\n        self.skipWaiting();\n    })());\n    else // Development environment: Skip caching and take control immediately.\n    self.skipWaiting();\n});\n// Clean up old caches\nself.addEventListener(\"activate\", (event)=>{\n    const currentCaches = [\n        $b30a198135d8e84a$var$CACHE_NAME,\n        $b30a198135d8e84a$var$JS_CACHE\n    ];\n    event.waitUntil(caches.keys().then((cacheNames)=>{\n        return Promise.all(cacheNames.map((cacheName)=>{\n            if (!currentCaches.includes(cacheName)) return caches.delete(cacheName);\n        }));\n    }).then(()=>self.clients.claim()));\n});\n// Inside your service worker 'fetch' event listener\nself.addEventListener(\"fetch\", (event)=>{\n    // check to see if in DEV\n    if (!$b30a198135d8e84a$var$isDevelopmentEnvironment()) {\n        // check if JS file \n        if (event.request.url.endsWith(\".js\")) event.respondWith(caches.open(\"js-cache\").then((cache)=>{\n            return cache.match(event.request).then((response)=>{\n                if (response) // If the JS file is in the cache, return it\n                return response;\n                else // Otherwise fetch the JS file from the network, cache it, and return it\n                return fetch(event.request).then((networkResponse)=>{\n                    cache.put(event.request, networkResponse.clone());\n                    return networkResponse;\n                });\n            });\n        }));\n        else // For non-JS files, just use a simple cache-first strategy\n        event.respondWith(caches.match(event.request).then((cachedResponse)=>{\n            return cachedResponse || fetch(event.request);\n        }));\n    } else // In development, always fetch from the network\n    event.respondWith(fetch(event.request));\n});\n\n})();\n//# sourceMappingURL=sw.js.map\n","const CACHE_NAME = 'fantasy-slayer-v1';\nconst JS_CACHE = 'js-cache'\nconst currentCaches = [CACHE_NAME, JS_CACHE]\nconst ASSETS = [\n  '/',\n  '/index.html',\n  '/css/critical.css',\n  '/css/index.css',\n  '/css/spell.css',\n  '/js/index.js',\n  '/js/utils.js',\n  '/js/character-data.js',\n  '/js/intro-handler.js',\n  '/js/render-health-chart.js',\n  '/assets/assets/soulforge.webp',\n  '/assets/assets/naqualk.webp',\n  '/assets/assets/mage.webp',\n  '/assets/assets/ignisfatuus.webp',\n  '/assets/assets/conscript.webp',\n  '/assets/assets/zed-fire.webp',\n  '/assets/AdobeStock_199937353-ec86d56f.webm',\n  '/assets/assets/audio/fantasmi-dell-opera-a-loop_AdobeStock_526744294.wav',\n  '/assets/assets/audio/EPIC-TRAILER-ACTION-ADVENTURE-(TENSE-NERVE)_AdobeStock_637559773.wav',\n  '/assets/assets/AdobeStock_460700032.webp',\n  '/assets/assets/audio/Under-Attack_AdobeStock_353737497.wav'\n\n  // Add other assets required by your game\n];\n\nfunction isDevelopmentEnvironment() {\n    return location.hostname === 'localhost' || location.hostname === '127.0.0.1';\n  }\n\n// Pre-cache game assets\nself.addEventListener('install', event => {\n    if (!isDevelopmentEnvironment()) {\n      // Production environment: Cache the assets.\n      event.waitUntil(\n        (async () => {\n          const cache = await caches.open(CACHE_NAME);\n          // Cache all the assets except the JS files\n          await cache.addAll(ASSETS.filter(asset => !asset.endsWith('.js')));\n  \n          const jsCache = await caches.open(JS_CACHE);\n          // Cache only the JS files\n          await jsCache.addAll(ASSETS.filter(asset => asset.endsWith('.js')));\n  \n          // Instruct the service worker to take control of the page immediately after installation\n          self.skipWaiting();\n        })()\n      );\n    } else {\n      // Development environment: Skip caching and take control immediately.\n      self.skipWaiting();\n    }\n  });\n  \n// Clean up old caches\nself.addEventListener('activate', event => {\n    const currentCaches = [CACHE_NAME, JS_CACHE];\n    event.waitUntil(\n      caches.keys().then(cacheNames => {\n        return Promise.all(\n          cacheNames.map(cacheName => {\n            if (!currentCaches.includes(cacheName)) {\n              return caches.delete(cacheName);\n            }\n          })\n        );\n      }).then(() => self.clients.claim())\n    );\n  });\n  \n// Inside your service worker 'fetch' event listener\nself.addEventListener('fetch', event => {\n    // check to see if in DEV\n    if(!isDevelopmentEnvironment()) {\n        // check if JS file \n        if(event.request.url.endsWith('.js')) {\n            event.respondWith(\n                caches.open('js-cache').then(cache => {\n                  return cache.match(event.request).then(response => {\n                    if (response) {\n                      // If the JS file is in the cache, return it\n                      return response;\n                    } else {\n                      // Otherwise fetch the JS file from the network, cache it, and return it\n                      return fetch(event.request).then(networkResponse => {\n                        cache.put(event.request, networkResponse.clone());\n                        return networkResponse;\n                      });\n                    }\n                  });\n                })\n              );\n        } else {\n            // For non-JS files, just use a simple cache-first strategy\n            event.respondWith(\n                caches.match(event.request).then(cachedResponse => {\n                return cachedResponse || fetch(event.request);\n                })\n            );\n        }\n    } else {\n        // In development, always fetch from the network\n        event.respondWith(fetch(event.request));\n    }\n  });\n\n"],"names":["$b30a198135d8e84a$var$CACHE_NAME","$b30a198135d8e84a$var$JS_CACHE","$b30a198135d8e84a$var$ASSETS","$b30a198135d8e84a$var$isDevelopmentEnvironment","location","hostname","self","addEventListener","event","skipWaiting","waitUntil","cache","caches","open","addAll","filter","asset","endsWith","jsCache","currentCaches","keys","then","cacheNames","Promise","all","map","cacheName","includes","delete","clients","claim","respondWith","fetch","request","url","match","response","networkResponse","put","clone","cachedResponse"],"version":3,"file":"sw.js.map"}